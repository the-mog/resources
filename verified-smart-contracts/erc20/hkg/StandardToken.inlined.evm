[0000] PUSH1 96:0x60
[0002] PUSH1 64:0x40
[0004] MSTORE       mem loc for contract return value

[0005] PUSH1 4:0x04
[0007] CALLDATASIZE
[0008] LT
[0009] PUSH2 109:0x006d
[0012] JUMPI        check calldatasize >= 4

[0013] PUSH1 0:0x00
[0015] CALLDATALOAD
[0016] PUSH29 26959946667150639794667015087019630673637144422540572481103610249216:0x0100000000000000000000000000000000000000000000000000000000
[0046] SWAP1
[0047] DIV
[0048] PUSH4 4294967295:0xffffffff
[0053] AND          extract first 4 bytes of calldata

[0054] DUP1
[0055] PUSH4 157198259:0x095ea7b3
[0060] EQ
[0061] PUSH2 114:0x0072
[0064] JUMPI        jump to approve

[0065] DUP1
[0066] PUSH4 599290589:0x23b872dd
[0071] EQ
[0072] PUSH2 204:0x00cc
[0075] JUMPI        jump to transferFrom

[0076] DUP1
[0077] PUSH4 1889567281:0x70a08231
[0082] EQ
[0083] PUSH2 325:0x0145
[0086] JUMPI        jump to balanceOf

[0087] DUP1
[0088] PUSH4 2835717307:0xa9059cbb
[0093] EQ
[0094] PUSH2 402:0x0192
[0097] JUMPI        jump to transfer

[0098] DUP1
[0099] PUSH4 3714247998:0xdd62ed3e
[0104] EQ
[0105] PUSH2 492:0x01ec
[0108] JUMPI        jump to allowance

[0109] JUMPDEST
[0110] PUSH1 0:0x00
[0112] DUP1
[0113] REVERT       revert when calldatasize < 4  from pc 12

[0114] JUMPDEST     begin of approve
[0115] CALLVALUE
[0116] ISZERO
[0117] PUSH2 125:0x007d
[0120] JUMPI
[0121] PUSH1 0:0x00
[0123] DUP1
[0124] REVERT
[0125] JUMPDEST
[0126] PUSH2 178:0x00b2
[0129] PUSH1 4:0x04
[0131] DUP1
[0132] DUP1
[0133] CALLDATALOAD
[0134] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0155] AND
[0156] SWAP1
[0157] PUSH1 32:0x20
[0159] ADD
[0160] SWAP1
[0161] SWAP2
[0162] SWAP1
[0163] DUP1
[0164] CALLDATALOAD
[0165] SWAP1
[0166] PUSH1 32:0x20
[0168] ADD
[0169] SWAP1
[0170] SWAP2
[0171] SWAP1
[0172] POP
[0173] POP
[0174] PUSH2 600:0x0258
[0177] JUMP         jump to approve body

[0178] JUMPDEST 
[0179] PUSH1 64:0x40
[0181] MLOAD
[0182] DUP1
[0183] DUP3
[0184] ISZERO
[0185] ISZERO
[0186] ISZERO
[0187] ISZERO
[0188] DUP2
[0189] MSTORE
[0190] PUSH1 32:0x20
[0192] ADD
[0193] SWAP2
[0194] POP
[0195] POP
[0196] PUSH1 64:0x40
[0198] MLOAD
[0199] DUP1
[0200] SWAP2
[0201] SUB
[0202] SWAP1
[0203] RETURN       end of approve return

[0204] JUMPDEST     begin of transferFrom
[0205] CALLVALUE
[0206] ISZERO
[0207] PUSH2 215:0x00d7
[0210] JUMPI
[0211] PUSH1 0:0x00
[0213] DUP1
[0214] REVERT
[0215] JUMPDEST
[0216] PUSH2 299:0x012b
[0219] PUSH1 4:0x04
[0221] DUP1
[0222] DUP1
[0223] CALLDATALOAD
[0224] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0245] AND
[0246] SWAP1
[0247] PUSH1 32:0x20
[0249] ADD
[0250] SWAP1
[0251] SWAP2
[0252] SWAP1
[0253] DUP1
[0254] CALLDATALOAD
[0255] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0276] AND
[0277] SWAP1
[0278] PUSH1 32:0x20
[0280] ADD
[0281] SWAP1
[0282] SWAP2
[0283] SWAP1
[0284] DUP1
[0285] CALLDATALOAD
[0286] SWAP1
[0287] PUSH1 32:0x20
[0289] ADD
[0290] SWAP1
[0291] SWAP2
[0292] SWAP1
[0293] POP
[0294] POP
[0295] PUSH2 842:0x034a
[0298] JUMP

[0299] JUMPDEST
[0300] PUSH1 64:0x40
[0302] MLOAD
[0303] DUP1
[0304] DUP3
[0305] ISZERO
[0306] ISZERO
[0307] ISZERO
[0308] ISZERO
[0309] DUP2
[0310] MSTORE
[0311] PUSH1 32:0x20
[0313] ADD
[0314] SWAP2
[0315] POP
[0316] POP
[0317] PUSH1 64:0x40
[0319] MLOAD
[0320] DUP1
[0321] SWAP2
[0322] SUB
[0323] SWAP1
[0324] RETURN       end of transferFrom return

[0325] JUMPDEST     begin of balanceOf
[0326] CALLVALUE
[0327] ISZERO
[0328] PUSH2 336:0x0150
[0331] JUMPI        check if callvalue == 0
[0332] PUSH1 0:0x00
[0334] DUP1
[0335] REVERT       revert if callvalue != 0
[0336] JUMPDEST
[0337] PUSH2 380:0x017c     ???
[0340] PUSH1 4:0x04
[0342] DUP1
[0343] DUP1
[0344] CALLDATALOAD     load first argument from calldata
[0345] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0366] AND          truncate if the argument more than 20 bytes (for address type)
[0367] SWAP1
[0368] PUSH1 32:0x20    
[0370] ADD              32 + 4 ???
[0371] SWAP1
[0372] SWAP2
[0373] SWAP1
[0374] POP
[0375] POP              useless ???
[0376] PUSH2 1478:0x05c6
[0379] JUMP

[0380] JUMPDEST             
[0381] PUSH1 64:0x40
[0383] MLOAD                the value stored at the beggining = 96
[0384] DUP1
[0385] DUP3
[0386] DUP2
[0387] MSTORE               mem[96] := return value
[0388] PUSH1 32:0x20
[0390] ADD
[0391] SWAP2
[0392] POP
[0393] POP
[0394] PUSH1 64:0x40
[0396] MLOAD
[0397] DUP1
[0398] SWAP2
[0399] SUB                  length of return memory range
[0400] SWAP1
[0401] RETURN               end of balaceOf return mem[96]

[0402] JUMPDEST     begin of transfer
[0403] CALLVALUE
[0404] ISZERO
[0405] PUSH2 413:0x019d
[0408] JUMPI
[0409] PUSH1 0:0x00
[0411] DUP1
[0412] REVERT
[0413] JUMPDEST
[0414] PUSH2 466:0x01d2
[0417] PUSH1 4:0x04
[0419] DUP1
[0420] DUP1
[0421] CALLDATALOAD
[0422] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0443] AND
[0444] SWAP1
[0445] PUSH1 32:0x20
[0447] ADD
[0448] SWAP1
[0449] SWAP2
[0450] SWAP1
[0451] DUP1
[0452] CALLDATALOAD
[0453] SWAP1
[0454] PUSH1 32:0x20
[0456] ADD
[0457] SWAP1
[0458] SWAP2
[0459] SWAP1
[0460] POP
[0461] POP
[0462] PUSH2 1551:0x060f
[0465] JUMP

[0466] JUMPDEST
[0467] PUSH1 64:0x40
[0469] MLOAD
[0470] DUP1
[0471] DUP3
[0472] ISZERO
[0473] ISZERO
[0474] ISZERO
[0475] ISZERO
[0476] DUP2
[0477] MSTORE
[0478] PUSH1 32:0x20
[0480] ADD
[0481] SWAP2
[0482] POP
[0483] POP
[0484] PUSH1 64:0x40
[0486] MLOAD
[0487] DUP1
[0488] SWAP2
[0489] SUB
[0490] SWAP1
[0491] RETURN           end of transfer return

[0492] JUMPDEST         begin of allowance
[0493] CALLVALUE
[0494] ISZERO
[0495] PUSH2 503:0x01f7
[0498] JUMPI
[0499] PUSH1 0:0x00
[0501] DUP1
[0502] REVERT
[0503] JUMPDEST
[0504] PUSH2 578:0x0242
[0507] PUSH1 4:0x04
[0509] DUP1
[0510] DUP1
[0511] CALLDATALOAD
[0512] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0533] AND
[0534] SWAP1
[0535] PUSH1 32:0x20
[0537] ADD
[0538] SWAP1
[0539] SWAP2
[0540] SWAP1
[0541] DUP1
[0542] CALLDATALOAD
[0543] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0564] AND
[0565] SWAP1
[0566] PUSH1 32:0x20
[0568] ADD
[0569] SWAP1
[0570] SWAP2
[0571] SWAP1
[0572] POP
[0573] POP
[0574] PUSH2 1912:0x0778
[0577] JUMP

[0578] JUMPDEST     allownace return
[0579] PUSH1 64:0x40
[0581] MLOAD
[0582] DUP1
[0583] DUP3
[0584] DUP2
[0585] MSTORE
[0586] PUSH1 32:0x20
[0588] ADD
[0589] SWAP2
[0590] POP
[0591] POP
[0592] PUSH1 64:0x40
[0594] MLOAD
[0595] DUP1
[0596] SWAP2
[0597] SUB
[0598] SWAP1
[0599] RETURN       end of allownace return

[0600] JUMPDEST     begin of approve body
[0601] PUSH1 0:0x00
[0603] DUP2
[0604] PUSH1 2:0x02
[0606] PUSH1 0:0x00
[0608] CALLER
[0609] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0630] AND
[0631] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0652] AND
[0653] DUP2
[0654] MSTORE
[0655] PUSH1 32:0x20
[0657] ADD
[0658] SWAP1
[0659] DUP2
[0660] MSTORE
[0661] PUSH1 32:0x20
[0663] ADD
[0664] PUSH1 0:0x00
[0666] SHA3
[0667] PUSH1 0:0x00
[0669] DUP6
[0670] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0691] AND
[0692] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0713] AND
[0714] DUP2
[0715] MSTORE
[0716] PUSH1 32:0x20
[0718] ADD
[0719] SWAP1
[0720] DUP2
[0721] MSTORE
[0722] PUSH1 32:0x20
[0724] ADD
[0725] PUSH1 0:0x00
[0727] SHA3
[0728] DUP2
[0729] SWAP1
[0730] SSTORE
[0731] POP
[0732] DUP3
[0733] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0754] AND
[0755] CALLER
[0756] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0777] AND
[0778] PUSH32 63486140976153616755203102783360879283472101686154884697241723088393386309925:0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925
[0811] DUP5
[0812] PUSH1 64:0x40
[0814] MLOAD
[0815] DUP1
[0816] DUP3
[0817] DUP2
[0818] MSTORE
[0819] PUSH1 32:0x20
[0821] ADD
[0822] SWAP2
[0823] POP
[0824] POP
[0825] PUSH1 64:0x40
[0827] MLOAD
[0828] DUP1
[0829] SWAP2
[0830] SUB
[0831] SWAP1
[0832] LOG3
[0833] PUSH1 1:0x01
[0835] SWAP1
[0836] POP
[0837] SWAP3
[0838] SWAP2
[0839] POP
[0840] POP
[0841] JUMP

[0842] JUMPDEST     begin of transferFrom body
[0843] PUSH1 0:0x00
[0845] DUP2
[0846] PUSH1 1:0x01
[0848] PUSH1 0:0x00
[0850] DUP7
[0851] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0872] AND
[0873] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0894] AND
[0895] DUP2
[0896] MSTORE
[0897] PUSH1 32:0x20
[0899] ADD
[0900] SWAP1
[0901] DUP2
[0902] MSTORE
[0903] PUSH1 32:0x20
[0905] ADD
[0906] PUSH1 0:0x00
[0908] SHA3
[0909] SLOAD
[0910] LT
[0911] ISZERO
[0912] DUP1
[0913] ISZERO
[0914] PUSH2 1047:0x0417
[0917] JUMPI
[0918] POP
[0919] DUP2
[0920] PUSH1 2:0x02
[0922] PUSH1 0:0x00
[0924] DUP7
[0925] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0946] AND
[0947] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[0968] AND
[0969] DUP2
[0970] MSTORE
[0971] PUSH1 32:0x20
[0973] ADD
[0974] SWAP1
[0975] DUP2
[0976] MSTORE
[0977] PUSH1 32:0x20
[0979] ADD
[0980] PUSH1 0:0x00
[0982] SHA3
[0983] PUSH1 0:0x00
[0985] CALLER
[0986] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1007] AND
[1008] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1029] AND
[1030] DUP2
[1031] MSTORE
[1032] PUSH1 32:0x20
[1034] ADD
[1035] SWAP1
[1036] DUP2
[1037] MSTORE
[1038] PUSH1 32:0x20
[1040] ADD
[1041] PUSH1 0:0x00
[1043] SHA3
[1044] SLOAD
[1045] LT
[1046] ISZERO
[1047] JUMPDEST
[1048] DUP1
[1049] ISZERO
[1050] PUSH2 1059:0x0423
[1053] JUMPI
[1054] POP
[1055] PUSH1 0:0x00
[1057] DUP3
[1058] GT
[1059] JUMPDEST
[1060] ISZERO
[1061] PUSH2 1466:0x05ba
[1064] JUMPI
[1065] DUP2
[1066] PUSH1 1:0x01
[1068] PUSH1 0:0x00
[1070] DUP7
[1071] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1092] AND
[1093] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1114] AND
[1115] DUP2
[1116] MSTORE
[1117] PUSH1 32:0x20
[1119] ADD
[1120] SWAP1
[1121] DUP2
[1122] MSTORE
[1123] PUSH1 32:0x20
[1125] ADD
[1126] PUSH1 0:0x00
[1128] SHA3
[1129] PUSH1 0:0x00
[1131] DUP3
[1132] DUP3
[1133] SLOAD
[1134] SUB
[1135] SWAP3
[1136] POP
[1137] POP
[1138] DUP2
[1139] SWAP1
[1140] SSTORE
[1141] POP
[1142] DUP2
[1143] PUSH1 1:0x01
[1145] PUSH1 0:0x00
[1147] DUP6
[1148] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1169] AND
[1170] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1191] AND
[1192] DUP2
[1193] MSTORE
[1194] PUSH1 32:0x20
[1196] ADD
[1197] SWAP1
[1198] DUP2
[1199] MSTORE
[1200] PUSH1 32:0x20
[1202] ADD
[1203] PUSH1 0:0x00
[1205] SHA3
[1206] PUSH1 0:0x00
[1208] DUP3
[1209] DUP3
[1210] SLOAD
[1211] ADD
[1212] SWAP3
[1213] POP
[1214] POP
[1215] DUP2
[1216] SWAP1
[1217] SSTORE
[1218] POP
[1219] DUP2
[1220] PUSH1 2:0x02
[1222] PUSH1 0:0x00
[1224] DUP7
[1225] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1246] AND
[1247] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1268] AND
[1269] DUP2
[1270] MSTORE
[1271] PUSH1 32:0x20
[1273] ADD
[1274] SWAP1
[1275] DUP2
[1276] MSTORE
[1277] PUSH1 32:0x20
[1279] ADD
[1280] PUSH1 0:0x00
[1282] SHA3
[1283] PUSH1 0:0x00
[1285] CALLER
[1286] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1307] AND
[1308] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1329] AND
[1330] DUP2
[1331] MSTORE
[1332] PUSH1 32:0x20
[1334] ADD
[1335] SWAP1
[1336] DUP2
[1337] MSTORE
[1338] PUSH1 32:0x20
[1340] ADD
[1341] PUSH1 0:0x00
[1343] SHA3
[1344] PUSH1 0:0x00
[1346] DUP3
[1347] DUP3
[1348] SLOAD
[1349] SUB
[1350] SWAP3
[1351] POP
[1352] POP
[1353] DUP2
[1354] SWAP1
[1355] SSTORE
[1356] POP
[1357] DUP3
[1358] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1379] AND
[1380] DUP5
[1381] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1402] AND
[1403] PUSH32 100389287136786176327247604509743168900146139575972864366142685224231313322991:0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
[1436] DUP5
[1437] PUSH1 64:0x40
[1439] MLOAD
[1440] DUP1
[1441] DUP3
[1442] DUP2
[1443] MSTORE
[1444] PUSH1 32:0x20
[1446] ADD
[1447] SWAP2
[1448] POP
[1449] POP
[1450] PUSH1 64:0x40
[1452] MLOAD
[1453] DUP1
[1454] SWAP2
[1455] SUB
[1456] SWAP1
[1457] LOG3
[1458] PUSH1 1:0x01
[1460] SWAP1
[1461] POP
[1462] PUSH2 1471:0x05bf
[1465] JUMP
[1466] JUMPDEST
[1467] PUSH1 0:0x00
[1469] SWAP1
[1470] POP
[1471] JUMPDEST
[1472] SWAP4
[1473] SWAP3
[1474] POP
[1475] POP
[1476] POP
[1477] JUMP

[1478] JUMPDEST         begin of balanceOf body : in the stack at this point: parameter, return address, function signature
[1479] PUSH1 0:0x00     ???
[1481] PUSH1 1:0x01     balances idx
[1483] PUSH1 0:0x00     the memory loc for storing the first parameter
[1485] DUP4             the first parameter
[1486] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1507] AND              truncating the address parameter
[1508] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1529] AND              ??? why truncating twice?
[1530] DUP2             the memory loc for storing the first parameter 
[1531] MSTORE           storing first parameter mem[0]
[1532] PUSH1 32:0x20
[1534] ADD              next memory address = 32
[1535] SWAP1
[1536] DUP2
[1537] MSTORE           storeing balances idex at mem[32]
[1538] PUSH1 32:0x20
[1540] ADD              next memory address = 64
[1541] PUSH1 0:0x00
[1543] SHA3             hash( first parameter ++ balances idx ) = key for balances[owner]
[1544] SLOAD            balances[owner]
[1545] SWAP1            
[1546] POP
[1547] SWAP2
[1548] SWAP1
[1549] POP              ???
[1550] JUMP             jump to balanceOf return block: with return value = balances[owner]

[1551] JUMPDEST     begin of transfer body
[1552] PUSH1 0:0x00
[1554] DUP2
[1555] PUSH1 1:0x01
[1557] PUSH1 0:0x00
[1559] CALLER
[1560] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1581] AND
[1582] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1603] AND
[1604] DUP2
[1605] MSTORE
[1606] PUSH1 32:0x20
[1608] ADD
[1609] SWAP1
[1610] DUP2
[1611] MSTORE
[1612] PUSH1 32:0x20
[1614] ADD
[1615] PUSH1 0:0x00
[1617] SHA3
[1618] SLOAD
[1619] LT
[1620] ISZERO
[1621] DUP1
[1622] ISZERO
[1623] PUSH2 1632:0x0660
[1626] JUMPI
[1627] POP
[1628] PUSH1 0:0x00
[1630] DUP3
[1631] GT
[1632] JUMPDEST
[1633] ISZERO
[1634] PUSH2 1901:0x076d
[1637] JUMPI
[1638] DUP2
[1639] PUSH1 1:0x01
[1641] PUSH1 0:0x00
[1643] CALLER
[1644] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1665] AND
[1666] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1687] AND
[1688] DUP2
[1689] MSTORE
[1690] PUSH1 32:0x20
[1692] ADD
[1693] SWAP1
[1694] DUP2
[1695] MSTORE
[1696] PUSH1 32:0x20
[1698] ADD
[1699] PUSH1 0:0x00
[1701] SHA3
[1702] PUSH1 0:0x00
[1704] DUP3
[1705] DUP3
[1706] SLOAD
[1707] SUB
[1708] SWAP3
[1709] POP
[1710] POP
[1711] DUP2
[1712] SWAP1
[1713] SSTORE
[1714] POP
[1715] DUP2
[1716] PUSH1 1:0x01
[1718] PUSH1 0:0x00
[1720] DUP6
[1721] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1742] AND
[1743] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1764] AND
[1765] DUP2
[1766] MSTORE
[1767] PUSH1 32:0x20
[1769] ADD
[1770] SWAP1
[1771] DUP2
[1772] MSTORE
[1773] PUSH1 32:0x20
[1775] ADD
[1776] PUSH1 0:0x00
[1778] SHA3
[1779] PUSH1 0:0x00
[1781] DUP3
[1782] DUP3
[1783] SLOAD
[1784] ADD
[1785] SWAP3
[1786] POP
[1787] POP
[1788] DUP2
[1789] SWAP1
[1790] SSTORE
[1791] POP
[1792] DUP3
[1793] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1814] AND
[1815] CALLER
[1816] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1837] AND
[1838] PUSH32 100389287136786176327247604509743168900146139575972864366142685224231313322991:0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
[1871] DUP5
[1872] PUSH1 64:0x40
[1874] MLOAD
[1875] DUP1
[1876] DUP3
[1877] DUP2
[1878] MSTORE
[1879] PUSH1 32:0x20
[1881] ADD
[1882] SWAP2
[1883] POP
[1884] POP
[1885] PUSH1 64:0x40
[1887] MLOAD
[1888] DUP1
[1889] SWAP2
[1890] SUB
[1891] SWAP1
[1892] LOG3
[1893] PUSH1 1:0x01
[1895] SWAP1
[1896] POP
[1897] PUSH2 1906:0x0772
[1900] JUMP
[1901] JUMPDEST
[1902] PUSH1 0:0x00
[1904] SWAP1
[1905] POP
[1906] JUMPDEST
[1907] SWAP3
[1908] SWAP2
[1909] POP
[1910] POP
[1911] JUMP

[1912] JUMPDEST     begin of allowance body
[1913] PUSH1 0:0x00
[1915] PUSH1 2:0x02
[1917] PUSH1 0:0x00
[1919] DUP5
[1920] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1941] AND
[1942] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[1963] AND
[1964] DUP2
[1965] MSTORE
[1966] PUSH1 32:0x20
[1968] ADD
[1969] SWAP1
[1970] DUP2
[1971] MSTORE
[1972] PUSH1 32:0x20
[1974] ADD
[1975] PUSH1 0:0x00
[1977] SHA3
[1978] PUSH1 0:0x00
[1980] DUP4
[1981] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[2002] AND
[2003] PUSH20 1461501637330902918203684832716283019655932542975:0xffffffffffffffffffffffffffffffffffffffff
[2024] AND
[2025] DUP2
[2026] MSTORE
[2027] PUSH1 32:0x20
[2029] ADD
[2030] SWAP1
[2031] DUP2
[2032] MSTORE
[2033] PUSH1 32:0x20
[2035] ADD
[2036] PUSH1 0:0x00
[2038] SHA3
[2039] SLOAD
[2040] SWAP1
[2041] POP
[2042] SWAP3
[2043] SWAP2
[2044] POP
[2045] POP
[2046] JUMP

[2047] STOP     end of bytecode


Swarm Hash: 6cb5284e8795f7d1c570318732bc1cb8add2222946156c0ba28c946531c4a2f5

a1 65 627a7a7230 58 20 6cb5284e8795f7d1c570318732bc1cb8add2222946156c0ba28c946531c4a2f5 0029

[2048] a1 LOG1
[2049] 65 PUSH6 108278179835992:0x627a7a723058
[2056] 20 SHA3
[2057] 6c PUSH13 14352771751974526173724059054780:0xb5284e8795f7d1c570318732bc
[2071] 1c ERROR 1c
[2072] b8 ERROR b8
[2073] ad ERROR ad
[2074] d2 ERROR d2
[2075] 22 ERROR 22
[2076] 29 ERROR 29
[2077] 46 ERROR 46
[2078] 15 ISZERO
[2079] 6c PUSH13 ERROR 14065800623163733662040105:0x0ba28c946531c4a2f50029 (2 bytes missed)
