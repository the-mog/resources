diff --git a/xpcom/glue/Makefile.in b/xpcom/glue/Makefile.in
index f41ac6d..07242f8 100644
--- a/xpcom/glue/Makefile.in
+++ b/xpcom/glue/Makefile.in
@@ -33,6 +33,7 @@ SDK_HEADERS = \
 		nsCycleCollectorUtils.h \
 		nsDataHashtable.h \
 		nsDebug.h \
+		nsDebugTor.h \
 		nsDeque.h \
 		nsEnumeratorUtils.h \
 		nsHashKeys.h \
diff --git a/xpcom/glue/nsCOMPtr.h b/xpcom/glue/nsCOMPtr.h
index d082928..66ccf4a 100644
--- a/xpcom/glue/nsCOMPtr.h
+++ b/xpcom/glue/nsCOMPtr.h
@@ -25,9 +25,9 @@
 #include "mozilla/NullPtr.h"
 
   // Wrapping includes can speed up compiles (see "Large Scale C++ Software Design")
-#ifndef nsDebug_h___
-#include "nsDebug.h"
-  // for |NS_ABORT_IF_FALSE|, |NS_ASSERTION|
+#ifndef nsDebugTor_h___
+#include "nsDebugTor.h"
+  // for |TBB_NS_ABORT_IF_FALSE|, |TBB_NS_ASSERTION|
 #endif
 
 #ifndef nsISupportsUtils_h__
@@ -542,7 +542,7 @@ class nsCOMPtr MOZ_FINAL
           if ( mRawPtr )
             {
               nsCOMPtr<T> query_result( do_QueryInterface(mRawPtr) );
-              NS_ASSERTION(query_result.get() == mRawPtr, "QueryInterface needed");
+              TBB_NS_ASSERTION(query_result.get() == mRawPtr, "QueryInterface needed");
             }
         }
 
@@ -804,7 +804,7 @@ class nsCOMPtr MOZ_FINAL
           // parameters where rhs bay be a T** or an I** where I is a base class
           // of T.
         {
-          NS_ASSERTION(rhs, "Null pointer passed to forget!");
+          TBB_NS_ASSERTION(rhs, "Null pointer passed to forget!");
           NSCAP_LOG_RELEASE(this, mRawPtr);
           *rhs = get();
           mRawPtr = 0;
@@ -836,7 +836,7 @@ class nsCOMPtr MOZ_FINAL
       T*
       operator->() const
         {
-          NS_ABORT_IF_FALSE(mRawPtr != 0, "You can't dereference a NULL nsCOMPtr with operator->().");
+          TBB_NS_ABORT_IF_FALSE(mRawPtr != 0, "You can't dereference a NULL nsCOMPtr with operator->().");
           return get();
         }
 
@@ -860,7 +860,7 @@ class nsCOMPtr MOZ_FINAL
       T&
       operator*() const
         {
-          NS_ABORT_IF_FALSE(mRawPtr != 0, "You can't dereference a NULL nsCOMPtr with operator*().");
+          TBB_NS_ABORT_IF_FALSE(mRawPtr != 0, "You can't dereference a NULL nsCOMPtr with operator*().");
           return *get();
         }
 
@@ -1109,7 +1109,7 @@ class nsCOMPtr<nsISupports>
           // Useful to avoid unnecessary AddRef/Release pairs with "out"
           // parameters.
         {
-          NS_ASSERTION(rhs, "Null pointer passed to forget!");
+          TBB_NS_ASSERTION(rhs, "Null pointer passed to forget!");
           *rhs = 0;
           swap(*rhs);
         }
@@ -1143,7 +1143,7 @@ class nsCOMPtr<nsISupports>
       nsISupports*
       operator->() const
         {
-          NS_ABORT_IF_FALSE(mRawPtr != 0, "You can't dereference a NULL nsCOMPtr with operator->().");
+          TBB_NS_ABORT_IF_FALSE(mRawPtr != 0, "You can't dereference a NULL nsCOMPtr with operator->().");
           return get();
         }
 
@@ -1168,7 +1168,7 @@ class nsCOMPtr<nsISupports>
       nsISupports&
       operator*() const
         {
-          NS_ABORT_IF_FALSE(mRawPtr != 0, "You can't dereference a NULL nsCOMPtr with operator*().");
+          TBB_NS_ABORT_IF_FALSE(mRawPtr != 0, "You can't dereference a NULL nsCOMPtr with operator*().");
           return *get();
         }
 
diff --git a/xpcom/glue/nsDebugTor.h b/xpcom/glue/nsDebugTor.h
new file mode 100644
index 0000000..343e84e
--- /dev/null
+++ b/xpcom/glue/nsDebugTor.h
@@ -0,0 +1,371 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef nsDebugTor_h___
+#define nsDebugTor_h___
+
+#ifndef nscore_h___
+#include "nscore.h"
+#endif
+
+#ifndef nsError_h__
+#include "nsError.h"
+#endif 
+
+#include "nsXPCOM.h"
+#include "mozilla/Assertions.h"
+#include "mozilla/Likely.h"
+
+#ifndef TOR_NASSERT
+#include "prprf.h"
+#endif
+
+#ifndef TOR_NASSERT
+
+/**
+ * Abort the execution of the program if the expression evaluates to
+ * false.
+ *
+ * There is no status value returned from the macro.
+ *
+ * Note that the non-debug version of this macro does <b>not</b>
+ * evaluate the expression argument. Hence side effect statements
+ * as arguments to the macro will yield improper execution in a
+ * non-debug build. For example:
+ *
+ *      TBB_NS_ABORT_IF_FALSE(0 == foo++, "yikes foo should be zero");
+ *
+ * Note also that the non-debug version of this macro does <b>not</b>
+ * evaluate the message argument.
+ */
+#define TBB_NS_ABORT_IF_FALSE(_expr, _msg)                        \
+  do {                                                        \
+    if (!(_expr)) {                                           \
+      NS_DebugBreak(NS_DEBUG_ABORT, _msg, #_expr, __FILE__, __LINE__); \
+    }                                                         \
+  } while(0)
+
+/**
+ * Warn if a given condition is false.
+ *
+ * Program execution continues past the usage of this macro.
+ *
+ * Note also that the non-debug version of this macro does <b>not</b>
+ * evaluate the message argument.
+ */
+#define TBB_NS_WARN_IF_FALSE(_expr,_msg)                          \
+  do {                                                        \
+    if (!(_expr)) {                                           \
+      NS_DebugBreak(TBB_NS_DEBUG_WARNING, _msg, #_expr, __FILE__, __LINE__); \
+    }                                                         \
+  } while(0)
+
+/**
+ * Test a precondition for truth. If the expression is not true then
+ * trigger a program failure.
+ */
+#define TBB_NS_PRECONDITION(expr, str)                            \
+  do {                                                        \
+    if (!(expr)) {                                            \
+      NS_DebugBreak(NS_DEBUG_ASSERTION, str, #expr, __FILE__, __LINE__); \
+    }                                                         \
+  } while(0)
+
+/**
+ * Test an assertion for truth. If the expression is not true then
+ * trigger a program failure.
+ */
+#define TBB_NS_ASSERTION(expr, str)                               \
+  do {                                                        \
+    if (!(expr)) {                                            \
+      NS_DebugBreak(NS_DEBUG_ASSERTION, str, #expr, __FILE__, __LINE__); \
+    }                                                         \
+  } while(0)
+
+/**
+ * Test a post-condition for truth. If the expression is not true then
+ * trigger a program failure.
+ */
+#define TBB_NS_POSTCONDITION(expr, str)                           \
+  do {                                                        \
+    if (!(expr)) {                                            \
+      NS_DebugBreak(NS_DEBUG_ASSERTION, str, #expr, __FILE__, __LINE__); \
+    }                                                         \
+  } while(0)
+
+/**
+ * This macros triggers a program failure if executed. It indicates that
+ * an attempt was made to execute some unimplemented functionality.
+ */
+#define TBB_NS_NOTYETIMPLEMENTED(str)                             \
+  NS_DebugBreak(NS_DEBUG_ASSERTION, str, "NotYetImplemented", __FILE__, __LINE__)
+
+/**
+ * This macros triggers a program failure if executed. It indicates that
+ * an attempt was made to execute some unimplemented functionality.
+ */
+#define TBB_NS_NOTREACHED(str)                                    \
+  NS_DebugBreak(NS_DEBUG_ASSERTION, str, "Not Reached", __FILE__, __LINE__)
+
+/**
+ * Log an error message.
+ */
+#define TBB_NS_ERROR(str)                                         \
+  NS_DebugBreak(NS_DEBUG_ASSERTION, str, "Error", __FILE__, __LINE__)
+
+/**
+ * Log a warning message.
+ */
+#define TBB_NS_WARNING(str)                                       \
+  NS_DebugBreak(TBB_NS_DEBUG_WARNING, str, nullptr, __FILE__, __LINE__)
+
+/**
+ * Trigger an abort
+ */
+#define TBB_NS_ABORT()                                            \
+  NS_DebugBreak(NS_DEBUG_ABORT, nullptr, nullptr, __FILE__, __LINE__)
+
+/**
+ * Cause a break
+ */
+#define TBB_NS_BREAK()                                            \
+  NS_DebugBreak(TBB_NS_DEBUG_BREAK, nullptr, nullptr, __FILE__, __LINE__)
+
+#else /* DEBUG */
+
+/**
+ * The non-debug version of these macros do not evaluate the
+ * expression or the message arguments to the macro.
+ */
+#define TBB_NS_ABORT_IF_FALSE(_expr, _msg) do { /* nothing */ } while(0)
+#define TBB_NS_WARN_IF_FALSE(_expr, _msg)  do { /* nothing */ } while(0)
+#define TBB_NS_PRECONDITION(expr, str)     do { /* nothing */ } while(0)
+#define TBB_NS_ASSERTION(expr, str)        do { /* nothing */ } while(0)
+#define TBB_NS_POSTCONDITION(expr, str)    do { /* nothing */ } while(0)
+#define TBB_NS_NOTYETIMPLEMENTED(str)      do { /* nothing */ } while(0)
+#define TBB_NS_NOTREACHED(str)             do { /* nothing */ } while(0)
+#define TBB_NS_ERROR(str)                  do { /* nothing */ } while(0)
+#define TBB_NS_WARNING(str)                do { /* nothing */ } while(0)
+#define TBB_NS_ABORT()                     do { /* nothing */ } while(0)
+#define TBB_NS_BREAK()                     do { /* nothing */ } while(0)
+
+#endif /* TOR_ASSERT */
+
+/******************************************************************************
+** Macros for static assertions.  These are used by the sixgill tool.
+** When the tool is not running these macros are no-ops.
+******************************************************************************/
+
+/* Avoid name collision if included with other headers defining annotations. */
+#ifndef HAVE_STATIC_ANNOTATIONS
+#define HAVE_STATIC_ANNOTATIONS
+
+#ifdef XGILL_PLUGIN
+
+#define STATIC_PRECONDITION(COND)         __attribute__((precondition(#COND)))
+#define STATIC_PRECONDITION_ASSUME(COND)  __attribute__((precondition_assume(#COND)))
+#define STATIC_POSTCONDITION(COND)        __attribute__((postcondition(#COND)))
+#define STATIC_POSTCONDITION_ASSUME(COND) __attribute__((postcondition_assume(#COND)))
+#define STATIC_INVARIANT(COND)            __attribute__((invariant(#COND)))
+#define STATIC_INVARIANT_ASSUME(COND)     __attribute__((invariant_assume(#COND)))
+
+/* Used to make identifiers for assert/assume annotations in a function. */
+#define STATIC_PASTE2(X,Y) X ## Y
+#define STATIC_PASTE1(X,Y) STATIC_PASTE2(X,Y)
+
+#define STATIC_ASSERT(COND)                          \
+  do {                                               \
+    __attribute__((assert_static(#COND), unused))    \
+    int STATIC_PASTE1(assert_static_, __COUNTER__);  \
+  } while(0)
+
+#define STATIC_ASSUME(COND)                          \
+  do {                                               \
+    __attribute__((assume_static(#COND), unused))    \
+    int STATIC_PASTE1(assume_static_, __COUNTER__);  \
+  } while(0)
+
+#define STATIC_ASSERT_RUNTIME(COND)                         \
+  do {                                                      \
+    __attribute__((assert_static_runtime(#COND), unused))   \
+    int STATIC_PASTE1(assert_static_runtime_, __COUNTER__); \
+  } while(0)
+
+#else /* XGILL_PLUGIN */
+
+#define STATIC_PRECONDITION(COND)          /* nothing */
+#define STATIC_PRECONDITION_ASSUME(COND)   /* nothing */
+#define STATIC_POSTCONDITION(COND)         /* nothing */
+#define STATIC_POSTCONDITION_ASSUME(COND)  /* nothing */
+#define STATIC_INVARIANT(COND)             /* nothing */
+#define STATIC_INVARIANT_ASSUME(COND)      /* nothing */
+
+#define STATIC_ASSERT(COND)          do { /* nothing */ } while(0)
+#define STATIC_ASSUME(COND)          do { /* nothing */ } while(0)
+#define STATIC_ASSERT_RUNTIME(COND)  do { /* nothing */ } while(0)
+
+#endif /* XGILL_PLUGIN */
+
+#define STATIC_SKIP_INFERENCE STATIC_INVARIANT(skip_inference())
+
+#endif /* HAVE_STATIC_ANNOTATIONS */
+
+#ifdef XGILL_PLUGIN
+
+/* Redefine runtime assertion macros to perform static assertions, for both
+ * debug and release builds. Don't include the original runtime assertions;
+ * this ensures the tool will consider cases where the assertion fails. */
+
+#undef TBB_NS_PRECONDITION
+#undef TBB_NS_ASSERTION
+#undef TBB_NS_POSTCONDITION
+
+#define TBB_NS_PRECONDITION(expr, str)   STATIC_ASSERT_RUNTIME(expr)
+#define TBB_NS_ASSERTION(expr, str)      STATIC_ASSERT_RUNTIME(expr)
+#define TBB_NS_POSTCONDITION(expr, str)  STATIC_ASSERT_RUNTIME(expr)
+
+#endif /* XGILL_PLUGIN */
+
+/******************************************************************************
+** Macros for terminating execution when an unrecoverable condition is
+** reached.  These need to be compiled regardless of the DEBUG flag. 
+******************************************************************************/
+
+/**
+ * Terminate execution <i>immediately</i>, and if possible on the current
+ * platform, in such a way that execution can't be continued by other
+ * code (e.g., by intercepting a signal).
+ */
+#define TBB_NS_RUNTIMEABORT(msg)                                    \
+  NS_DebugBreak(NS_DEBUG_ABORT, msg, nullptr, __FILE__, __LINE__)
+
+
+/* Macros for checking the trueness of an expression passed in within an 
+ * interface implementation.  These need to be compiled regardless of the */
+/* DEBUG flag
+******************************************************************************/
+
+#define TBB_NS_ENSURE_TRUE(x, ret)                                \
+  do {                                                        \
+    if (MOZ_UNLIKELY(!(x))) {                                 \
+       TBB_NS_WARNING("TBB_NS_ENSURE_TRUE(" #x ") failed");           \
+       return ret;                                            \
+    }                                                         \
+  } while(0)
+
+#define TBB_NS_ENSURE_FALSE(x, ret)                               \
+  TBB_NS_ENSURE_TRUE(!(x), ret)
+
+#define TBB_NS_ENSURE_TRUE_VOID(x)                                \
+  do {                                                        \
+    if (MOZ_UNLIKELY(!(x))) {                                 \
+       TBB_NS_WARNING("TBB_NS_ENSURE_TRUE(" #x ") failed");           \
+       return;                                                \
+    }                                                         \
+  } while(0)
+
+#define TBB_NS_ENSURE_FALSE_VOID(x)                               \
+  TBB_NS_ENSURE_TRUE_VOID(!(x))
+
+/******************************************************************************
+** Macros for checking results
+******************************************************************************/
+
+#if !defined(TOR_NASSERT) && !defined(XPCOM_GLUE_AVOID_NSPR)
+
+#define TBB_NS_ENSURE_SUCCESS_BODY(res, ret)                                  \
+    char *msg = PR_smprintf("TBB_NS_ENSURE_SUCCESS(%s, %s) failed with "      \
+                            "result 0x%X", #res, #ret, __rv);             \
+    TBB_NS_WARNING(msg);                                                      \
+    PR_smprintf_free(msg);
+
+#define TBB_NS_ENSURE_SUCCESS_BODY_VOID(res)                                  \
+    char *msg = PR_smprintf("TBB_NS_ENSURE_SUCCESS_VOID(%s) failed with "     \
+                            "result 0x%X", #res, __rv);                   \
+    TBB_NS_WARNING(msg);                                                      \
+    PR_smprintf_free(msg);
+
+#else
+
+#define TBB_NS_ENSURE_SUCCESS_BODY(res, ret)                                  \
+    TBB_NS_WARNING("TBB_NS_ENSURE_SUCCESS(" #res ", " #ret ") failed");
+
+#define TBB_NS_ENSURE_SUCCESS_BODY_VOID(res)                                  \
+    TBB_NS_WARNING("TBB_NS_ENSURE_SUCCESS_VOID(" #res ") failed");
+
+#endif
+
+#define TBB_NS_ENSURE_SUCCESS(res, ret)                                       \
+  do {                                                                    \
+    nsresult __rv = res; /* Don't evaluate |res| more than once */        \
+    if (TBB_NS_FAILED(__rv)) {                                                \
+      TBB_NS_ENSURE_SUCCESS_BODY(res, ret)                                    \
+      return ret;                                                         \
+    }                                                                     \
+  } while(0)
+
+#define TBB_NS_ENSURE_SUCCESS_VOID(res)                                       \
+  do {                                                                    \
+    nsresult __rv = res;                                                  \
+    if (TBB_NS_FAILED(__rv)) {                                                \
+      TBB_NS_ENSURE_SUCCESS_BODY_VOID(res)                                    \
+      return;                                                             \
+    }                                                                     \
+  } while(0)
+
+/******************************************************************************
+** Macros for checking state and arguments upon entering interface boundaries
+******************************************************************************/
+
+#define TBB_NS_ENSURE_ARG(arg)                                    \
+  TBB_NS_ENSURE_TRUE(arg, TBB_NS_ERROR_INVALID_ARG)
+
+#define TBB_NS_ENSURE_ARG_POINTER(arg)                            \
+  TBB_NS_ENSURE_TRUE(arg, TBB_NS_ERROR_INVALID_POINTER)
+
+#define TBB_NS_ENSURE_ARG_MIN(arg, min)                           \
+  TBB_NS_ENSURE_TRUE((arg) >= min, TBB_NS_ERROR_INVALID_ARG)
+
+#define TBB_NS_ENSURE_ARG_MAX(arg, max)                           \
+  TBB_NS_ENSURE_TRUE((arg) <= max, TBB_NS_ERROR_INVALID_ARG)
+
+#define TBB_NS_ENSURE_ARG_RANGE(arg, min, max)                    \
+  TBB_NS_ENSURE_TRUE(((arg) >= min) && ((arg) <= max), TBB_NS_ERROR_INVALID_ARG)
+
+#define TBB_NS_ENSURE_STATE(state)                                \
+  TBB_NS_ENSURE_TRUE(state, TBB_NS_ERROR_UNEXPECTED)
+
+#define TBB_NS_ENSURE_NO_AGGREGATION(outer)                       \
+  TBB_NS_ENSURE_FALSE(outer, TBB_NS_ERROR_NO_AGGREGATION)
+
+#define TBB_NS_ENSURE_PROPER_AGGREGATION(outer, iid)              \
+  TBB_NS_ENSURE_FALSE(outer && !iid.Equals(TBB_NS_GET_IID(nsISupports)), TBB_NS_ERROR_INVALID_ARG)
+
+/*****************************************************************************/
+
+#ifdef XPCOM_GLUE
+  #define TBB_NS_CheckThreadSafe(owningThread, msg)
+#else
+  #define TBB_NS_CheckThreadSafe(owningThread, msg)                 \
+    MOZ_ASSERT(owningThread == PR_GetCurrentThread(), msg)
+#endif
+
+/* When compiling the XPCOM Glue on Windows, we pretend that it's going to
+ * be linked with a static CRT (-MT) even when it's not. This means that we
+ * cannot link to data exports from the CRT, only function exports. So,
+ * instead of referencing "stderr" directly, use fdopen.
+ */
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+NS_COM_GLUE void
+printf_stderr(const char *fmt, ...);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* nsDebugTor_h___ */
